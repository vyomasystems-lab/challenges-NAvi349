$date
	Tue Jul 26 08:10:08 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module booth_rad_tb $end
$var wire 16 ! out [15:0] $end
$var wire 1 " done $end
$var reg 1 # clk $end
$var reg 16 $ data_in [15:0] $end
$var reg 1 % start $end
$scope module uut $end
$var wire 1 # clk $end
$var wire 16 & data_in [15:0] $end
$var wire 1 % start $end
$var wire 1 ' sftQ $end
$var wire 1 ( sftA $end
$var wire 1 ) qm1 $end
$var wire 1 * q0 $end
$var wire 16 + out [15:0] $end
$var wire 1 , ldQ $end
$var wire 1 - ldM $end
$var wire 1 . ldCnt $end
$var wire 1 / ldA $end
$var wire 1 0 eqz $end
$var wire 1 " done $end
$var wire 1 1 dec $end
$var wire 1 2 clrff $end
$var wire 1 3 clrQ $end
$var wire 1 4 clrA $end
$var wire 1 5 addsub $end
$var wire 16 6 Q [15:0] $end
$var wire 16 7 M [15:0] $end
$var wire 16 8 A [15:0] $end
$scope module bc0 $end
$var wire 1 # clk $end
$var wire 1 % start $end
$var wire 1 ) qm1 $end
$var wire 1 * q0 $end
$var wire 1 0 eqz $end
$var reg 1 5 addsub $end
$var reg 1 4 clrA $end
$var reg 1 3 clrQ $end
$var reg 1 2 clrff $end
$var reg 1 1 decr $end
$var reg 1 " done $end
$var reg 1 / ldA $end
$var reg 1 - ldM $end
$var reg 1 , ldQ $end
$var reg 1 . ldcnt $end
$var reg 1 ( sftA $end
$var reg 1 ' sftQ $end
$var reg 3 9 state [2:0] $end
$upscope $end
$scope module bd0 $end
$var wire 1 5 addsub $end
$var wire 1 # clk $end
$var wire 1 4 clrA $end
$var wire 1 3 clrQ $end
$var wire 1 2 clrff $end
$var wire 16 : data_in [15:0] $end
$var wire 1 1 dec $end
$var wire 1 / ldA $end
$var wire 1 . ldCnt $end
$var wire 1 - ldM $end
$var wire 1 , ldQ $end
$var wire 1 ( sftA $end
$var wire 1 ' sftQ $end
$var wire 1 ) qm1 $end
$var wire 1 * q0 $end
$var wire 1 0 eqz $end
$var wire 5 ; count [4:0] $end
$var wire 16 < Z [15:0] $end
$var wire 16 = Q [15:0] $end
$var wire 16 > M [15:0] $end
$var wire 16 ? A [15:0] $end
$scope module Areg $end
$var wire 1 # clk $end
$var wire 1 4 clr $end
$var wire 1 / ld $end
$var wire 1 @ s_in $end
$var wire 1 ( sft $end
$var wire 16 A data_in [15:0] $end
$var reg 16 B data_out [15:0] $end
$upscope $end
$scope module Qreg $end
$var wire 1 # clk $end
$var wire 1 3 clr $end
$var wire 16 C data_in [15:0] $end
$var wire 1 , ld $end
$var wire 1 D s_in $end
$var wire 1 ' sft $end
$var reg 16 E data_out [15:0] $end
$upscope $end
$scope module a0 $end
$var wire 1 5 addsub $end
$var wire 16 F in1 [15:0] $end
$var wire 16 G in2 [15:0] $end
$var reg 16 H out [15:0] $end
$upscope $end
$scope module c0 $end
$var wire 1 # clk $end
$var wire 1 1 dec $end
$var wire 1 . ldCnt $end
$var reg 5 I count [4:0] $end
$upscope $end
$scope module d0 $end
$var wire 1 # clk $end
$var wire 1 2 clr $end
$var wire 1 J d $end
$var reg 1 ) q $end
$upscope $end
$scope module mreg $end
$var wire 1 # clk $end
$var wire 16 K data_in [15:0] $end
$var wire 1 - load $end
$var reg 16 L data_out [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx L
b0 K
xJ
bx I
bx H
bx G
bx F
bx E
xD
b0 C
bx B
bx A
x@
bx ?
bx >
bx =
bx <
bx ;
b0 :
bx 9
bx 8
bx 7
bx 6
x5
x4
x3
x2
x1
x0
x/
x.
x-
x,
bx +
x*
x)
x(
x'
b0 &
0%
b0 $
0#
x"
bx !
$end
#5
0"
02
0-
0'
0,
13
0(
0/
04
b0 9
1#
#10
0#
#15
0J
0*
bx00000 !
bx00000 +
b0 6
b0 =
b0 E
1#
#20
0#
#25
0)
1#
#30
0#
#35
1#
#40
0#
#45
1#
#50
0#
#55
1#
#60
0#
#65
1#
#70
0#
#75
1#
#80
0#
#85
1#
#90
0#
#95
1#
#100
0#
#105
1#
#110
0#
1%
#115
03
1-
1.
12
14
b1 9
1#
#120
0#
b1111111111110110 $
b1111111111110110 &
b1111111111110110 :
b1111111111110110 C
b1111111111110110 K
#125
0D
0@
b0 !
b0 +
b1111111111110110 <
b1111111111110110 A
b1111111111110110 H
1,
0-
0.
02
04
b0 8
b0 ?
b0 B
b0 F
b1111111111110110 7
b1111111111110110 >
b1111111111110110 G
b1111111111110110 L
00
b101 ;
b101 I
b10 9
1#
#130
0#
b1101 $
b1101 &
b1101 :
b1101 C
b1101 K
#135
1J
1*
b1101 6
b1101 =
b1101 E
1#
#137
b1010 <
b1010 A
b1010 H
01
0,
05
1/
b100 9
#140
0#
#145
b10100 <
b10100 A
b10100 H
b101000000 !
b101000000 +
11
0/
1'
1(
1)
b1010 8
b1010 ?
b1010 B
b1010 F
b101 9
1#
#150
0#
#155
0J
0*
b1111 <
b1111 A
b1111 H
1D
b10100000 !
b10100000 +
b100 ;
b100 I
b110 6
b110 =
b110 E
b101 8
b101 ?
b101 B
b101 F
1#
#157
b1111111111111011 <
b1111111111111011 A
b1111111111111011 H
01
0'
0(
15
1/
b11 9
#160
0#
#165
b1111111111110001 <
b1111111111110001 A
b1111111111110001 H
1@
b1111111101100000 !
b1111111101100000 +
11
0/
1'
1(
0)
b1111111111111011 8
b1111111111111011 ?
b1111111111111011 B
b1111111111111011 F
b101 9
1#
#170
0#
#175
1J
1*
b1111111111110011 <
b1111111111110011 A
b1111111111110011 H
b1111111110110000 !
b1111111110110000 +
b11 ;
b11 I
b1000000000000011 6
b1000000000000011 =
b1000000000000011 E
b1111111111111101 8
b1111111111111101 ?
b1111111111111101 B
b1111111111111101 F
1#
#177
b111 <
b111 A
b111 H
01
0'
0(
05
1/
b100 9
#180
0#
#185
b10001 <
b10001 A
b10001 H
0@
b11110000 !
b11110000 +
11
0/
1'
1(
1)
b111 8
b111 ?
b111 B
b111 F
b101 9
1#
#190
0#
#195
b1101 <
b1101 A
b1101 H
b1111000 !
b1111000 +
b10 ;
b10 I
b1100000000000001 6
b1100000000000001 =
b1100000000000001 E
b11 8
b11 ?
b11 B
b11 F
1#
#200
0#
#205
b1011 <
b1011 A
b1011 H
0J
0*
b111100 !
b111100 +
b1 8
b1 ?
b1 B
b1 F
b1110000000000000 6
b1110000000000000 =
b1110000000000000 E
b1 ;
b1 I
1#
#207
b1111111111110111 <
b1111111111110111 A
b1111111111110111 H
01
0'
0(
15
1/
b11 9
#210
0#
#215
b1111111111101101 <
b1111111111101101 A
b1111111111101101 H
1@
b1111111011111100 !
b1111111011111100 +
11
0/
1'
1(
b1111111111110111 8
b1111111111110111 ?
b1111111111110111 B
b1111111111110111 F
0)
b101 9
1#
#220
0#
#225
b1111111111110001 <
b1111111111110001 A
b1111111111110001 H
b1111111101111110 !
b1111111101111110 +
b1111111111111011 8
b1111111111111011 ?
b1111111111111011 B
b1111111111111011 F
b1111000000000000 6
b1111000000000000 =
b1111000000000000 E
10
b0 ;
b0 I
1#
#227
01
0'
0(
1"
b110 9
#230
0#
